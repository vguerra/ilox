// Automated definitions for {{argument.baseName}}

class {{argument.baseName}} {

    protocol Visitor {
        associatedType Return

        {% for typeDef in argument.types %}
            {% for exprType, _ in typeDef %}
        optional func visit{{argument.baseName}}{{exprType}}(_ {{argument.baseName|lowercase}}:{{exprType}}) -> Return
            {% endfor %}
        {% endfor %}
    }

    func accept<R>(_ visitor: Visitor) -> R {
        fatalError("You are not allowed to call `accept` from `Exper` class")
    }
}

{% for typeDef in argument.types %}
    {% for exprType, exprProperties in typeDef %}
class {{exprType}} : {{argument.baseName}} {
        {% for propertyDefinition in exprProperties %}
            {% for propertyType, propertyName in propertyDefinition %}
    let {{propertyName}} : {{propertyType}}
            {% endfor %}
        {% endfor %}

    override func accept<R>(_ visitor: {{argument.baseName}}.Visitor) -> R {
        return visitor.visit{{argument.baseName}}{{exprType}}?(expr: self)
    }
}

    {% endfor %}
{% endfor %}
