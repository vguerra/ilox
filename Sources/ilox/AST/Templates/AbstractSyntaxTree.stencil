// Automated definitions for {{argument.baseName}}

protocol {{argument.baseName}}Visitor {
    associatedtype {{argument.baseName}}Return
{% for typeDef in argument.types %}
    {% for exprType, _ in typeDef %}
    func visit{{argument.baseName}}{{exprType}}({{argument.baseName|lowercase}}: {{exprType}}) -> {{argument.baseName}}Return
    {% endfor %}
{% endfor %}
}

protocol {{argument.baseName}}ThrowableVisitor {
    associatedtype {{argument.baseName}}Return
{% for typeDef in argument.types %}
    {% for exprType, _ in typeDef %}
    func visit{{argument.baseName}}{{exprType}}({{argument.baseName|lowercase}}: {{exprType}}) throws -> {{argument.baseName}}Return
    {% endfor %}
{% endfor %}
}


class {{argument.baseName}} {
    func accept<V: {{argument.baseName}}Visitor>(visitor: V) -> V.{{argument.baseName}}Return {
        fatalError("You are not allowed to call `accept` from `Expr` class")
    }
    func accept<V: {{argument.baseName}}ThrowableVisitor>(visitor: V) throws -> V.{{argument.baseName}}Return {
        fatalError("You are not allowed to call `accept` from `Expr` class")
    }
}
{% for typeDef in argument.types %}
    {% for exprType, exprProperties in typeDef %}

class {{exprType}} : {{argument.baseName}} {
        {% for propertyDefinition in exprProperties %}
            {% for propertyType, propertyName in propertyDefinition %}
    let {{propertyName}}: {{propertyType}}
            {% endfor %}
        {% endfor %}

    init(
        {% for propertyDefinition in exprProperties %}
            {% for propertyType, propertyName in propertyDefinition %}
            {{propertyName}}: {{propertyType}}{% endfor %}{{ ',' if not forloop.last }}
        {% endfor %}
    ) {
        {% for propertyDefinition in exprProperties %}
            {% for _, propertyName in propertyDefinition %}
        self.{{propertyName}} = {{propertyName}}{% endfor %}
        {% endfor %}
    }

    override func accept<V: {{argument.baseName}}Visitor>(visitor: V) -> V.{{argument.baseName}}Return {
        return visitor.visit{{argument.baseName}}{{exprType}}({{argument.baseName|lowercase}}: self)
    }
    override func accept<V: {{argument.baseName}}ThrowableVisitor>(visitor: V) throws -> V.{{argument.baseName}}Return {
        return try visitor.visit{{argument.baseName}}{{exprType}}({{argument.baseName|lowercase}}: self)
    }
}
    {% endfor %}
{% endfor %}
